{"version":3,"sources":["../../src/app.js"],"names":[],"mappings":"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","file":"app-cmp.js","sourcesContent":["/**\n *\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst PASSWORD_LOGIN = 'password';\nconst GOOGLE_SIGNIN  = 'https://accounts.google.com';\nconst FACEBOOK_LOGIN = 'https://www.facebook.com';\nconst REGISTER       = 'register';\nconst UNREGISTER     = 'unregister';\nconst SIGNOUT        = 'singout';\nconst DEFAULT_IMG    = '/images/default_img.png';\n\n/*\n  Although this sample app is using Polymer, most of the interactions are\n  handled using regular APIs so you don't have to learn about it.\n */\nlet app = document.querySelector('#app');\napp.cmaEnabled = !!navigator.credentials;\n// `selected` is used to show a portion of our page\napp.selected = 0;\n// User profile automatically show up when an object is set.\napp.userProfile = null;\n// Set an event listener to show a toast. (Polymer)\napp.listeners = {\n  'show-toast': 'showToast'\n};\n\n/**\n * Authentication flow with our own server\n * @param  {String} provider Credential type string.\n * @param  {FormData} form FormData to POST to the server\n * @return {Promise} Resolves when successfully authenticated\n */\napp._fetch = async function(provider, form = new FormData()) {\n  let url = '';\n  switch (provider) {\n    case FACEBOOK_LOGIN:\n      url = '/auth/facebook';\n      break;\n    case GOOGLE_SIGNIN:\n      url = '/auth/google';\n      break;\n    case PASSWORD_LOGIN:\n      url = '/auth/password';\n      break;\n    case REGISTER:\n      url = '/register';\n      break;\n    case UNREGISTER:\n      url = '/unregister';\n      break;\n    case SIGNOUT:\n      url = '/signout';\n      break;\n  }\n\n  let res = await fetch(url, {\n    method:      'POST',\n    // `credentials:'include'` is required to include cookies on `fetch`\n    credentials: 'include',\n    headers: {\n      // `X-Requested-With` header to avoid CSRF attacks\n      'X-Requested-With': 'XMLHttpRequest'\n    },\n    body:        form\n  });\n  // Convert JSON string to an object\n  if (res.status === 200) {\n    return res.json();\n  } else {\n    return Promise.reject();\n  }\n};\n\n/**\n * Let users sign-in without typing credentials\n * @param  {Boolean} silent Determines if user mediation is required.\n * @return {Promise} Resolves if credential info is available.\n */\napp._autoSignIn = async function(silent) {\n  if (app.cmaEnabled) {\n    // Actual Credential Management API call to get credential object\n    let cred = await navigator.credentials.get({\n      password: true,\n      federated: {\n        providers: [GOOGLE_SIGNIN, FACEBOOK_LOGIN]\n      },\n      mediation: silent ? 'silent' : 'optional'\n    });\n    // If credential object is available\n    if (cred) {\n      console.log('auto sign-in performed');\n\n      let promise;\n      switch (cred.type) {\n        case 'password':\n          // Change form `id` name to `email`\n          let form = new FormData();\n          form.append('email', cred.id);\n          form.append('password', cred.password);\n          promise = app._fetch(PASSWORD_LOGIN, form);\n          break;\n        case 'federated':\n          switch (cred.provider) {\n            case GOOGLE_SIGNIN:\n              // Return Promise from `gSignIn`\n              promise = app.gSignIn(cred.id);\n              break;\n            case FACEBOOK_LOGIN:\n              // Return Promise from `fbSignIn`\n              promise = app.fbSignIn();\n              break;\n          }\n          break;\n      }\n      if (promise) {\n        return promise.then(app.signedIn);\n      } else {\n        return Promise.resolve();\n      }\n    } else {\n      console.log('auto sign-in not performed');\n\n      // Resolve if credential object is not available\n      return Promise.resolve();\n    }\n  } else {\n    // Resolve if Credential Management API is not available\n    return Promise.resolve();\n  }\n};\n\n/**\n * When password sign-in button is pressed.\n * @return {void}\n */\napp.onPwSignIn = function(e) {\n  e.preventDefault();\n\n  let signinForm = e.target;\n\n  // Polymer `iron-form` feature to validate the form\n  if (!signinForm.validate()) return;\n\n  if (app.cmaEnabled) {\n    let form = new FormData();\n    form.append('email', cred.id);\n    form.append('password', cred.password);\n\n    // Sign-In with our own server\n    app._fetch(PASSWORD_LOGIN, form)\n    .then(profile => {\n      app.$.dialog.close();\n\n      // Construct `FormData` object from actual `form`\n      let cred = new PasswordCredential(signinForm);\n      cred.name = profile.name;\n\n      // Store credential information before posting\n      navigator.credentials.store(cred);\n      app.fire('show-toast', {\n        text: 'You are signed in'\n      });\n    }, () => {\n      // Polymer event to notice user that 'Authentication failed'.\n      app.fire('show-toast', {\n        text: 'Authentication failed'\n      });\n    });\n  } else {\n    app._fetch(PASSWORD_LOGIN, new FormData(signinForm))\n    .then(() => {\n      app.$.dialog.close();\n\n      app.fire('show-toast', {\n        text: 'You are signed in'\n      });\n    }, () => {\n      app.fire('show-toast', {\n        text: 'Authentication failed'\n      });\n    });\n  }\n};\n\n/**\n * When google sign-in button is pressed.\n * @return {void}\n */\napp.onGSignIn = function() {\n  app.gSignIn()\n  .then(app.signedIn)\n  .then(profile => {\n    app.$.dialog.close();\n\n    if (app.cmaEnabled) {\n      // Create `Credential` object for federation\n      var cred = new FederatedCredential({\n        id:       profile.email,\n        name:     profile.name,\n        iconURL:  profile.imageUrl || DEFAULT_IMG,\n        provider: GOOGLE_SIGNIN\n      });\n      // Store credential information after successful authentication\n      navigator.credentials.store(cred);\n    }\n    app.fire('show-toast', {\n      text: 'You are signed in'\n    });\n  }, () => {\n    // Polymer event to notice user that 'Authentication failed'.\n    app.fire('show-toast', {\n      text: 'Authentication failed'\n    });\n  });\n};\n\n/**\n * Let user sign-in using Google Sign-in\n * @param  {String} id Preferred Gmail address for user to sign-in\n * @return {Promise} Returns result of authFlow\n */\napp.gSignIn = function(id) {\n  // Return Promise after Facebook Login dance.\n  return (() => {\n    let auth2 = gapi.auth2.getAuthInstance();\n    if (auth2.isSignedIn.get()) {\n      // Check if currently signed in user is the same as intended.\n      let googleUser = auth2.currentUser.get();\n      if (googleUser.getBasicProfile().getEmail() === id) {\n        return Promise.resolve(googleUser);\n      }\n    }\n    // If the user is not signed in with expected account, let sign in.\n    return auth2.signIn({\n      // Set `login_hint` to specify an intended user account,\n      // otherwise user selection dialog will popup.\n      login_hint: id || ''\n    });\n  })().then(googleUser => {\n    // Now user is successfully authenticated with Google.\n    // Send ID Token to the server to authenticate with our server.\n    let form = new FormData();\n    form.append('id_token', googleUser.getAuthResponse().id_token);\n    return app._fetch(GOOGLE_SIGNIN, form);\n  });\n};\n\n/**\n * When facebook login button is pressed.\n * @return {void}\n */\napp.onFbSignIn = function() {\n  app.fbSignIn()\n  .then(app.signedIn)\n  .then(profile => {\n    app.$.dialog.close();\n\n    if (app.cmaEnabled) {\n      // Create `Credential` object for federation\n      var cred = new FederatedCredential({\n        id:       profile.email,\n        name:     profile.name,\n        iconURL:  profile.imageUrl || DEFAULT_IMG,\n        provider: FACEBOOK_LOGIN\n      });\n      // Store credential information after successful authentication\n      navigator.credentials.store(cred);\n    }\n    app.fire('show-toast', {\n      text: 'You are signed in'\n    });\n  }, () => {\n    // Polymer event to notice user that 'Authentication failed'.\n    app.fire('show-toast', {\n      text: 'Authentication failed'\n    });\n  });\n};\n\n/**\n * Let user sign-in using Facebook Login\n * @return {Promise} Returns result of authFlow\n */\napp.fbSignIn = function() {\n  // Return Promise after Facebook Login dance.\n  return (() => {\n    return new Promise(function(resolve) {\n      FB.getLoginStatus(function(res) {\n        if (res.status == 'connected') {\n          resolve(res);\n        } else {\n          FB.login(resolve, {scope: 'email'});\n        }\n      });\n    });\n  })().then(res => {\n    // On successful authentication with Facebook\n    if (res.status == 'connected') {\n      // For Facebook, we use the Access Token to authenticate.\n      let form = new FormData();\n      form.append('access_token', res.authResponse.accessToken);\n      return app._fetch(FACEBOOK_LOGIN, form);\n    } else {\n      // When authentication was rejected by Facebook\n      return Promise.reject();\n    }\n  });\n};\n\n/**\n * Invoked when 'Register' button is pressed, performs registration flow\n * and let user sign-in.\n * @return {void}\n */\napp.onRegister = function(e) {\n  e.preventDefault();\n\n  let regForm = e.target;\n\n  // Polymer `iron-form` feature to validate the form\n  if (!regForm.validate()) return;\n\n  app._fetch(REGISTER, new FormData(regForm))\n  .then(app.signedIn)\n  .then(profile => {\n    app.fire('show-toast', {\n      text: 'Thanks for signing up!'\n    });\n\n    if (app.cmaEnabled) {\n      // Create password credential\n      let cred = new PasswordCredential(regForm);\n      cred.name = profile.name;\n      cred.iconURL = profile.imageUrl;\n\n      // Store user information as this is registration using id/password\n      navigator.credentials.store(cred);\n    }\n  }, () => {\n    app.fire('show-toast', {\n      text: 'Registration failed'\n    });\n  });\n};\n\n/**\n * Invoked when 'Unregister' button is pressed, unregisters user.\n * @return {[type]} [description]\n */\napp.onUnregister = function() {\n  // POST `id` to `/unregister` to unregister the user\n  let form = new FormData();\n  form.append('id', app.userProfile.id);\n\n  app._fetch(UNREGISTER, form)\n  .then(() => {\n    if (app.cmaEnabled) {\n      // Turn on the mediation mode so auto sign-in won't happen\n      // until next time user intended to do so.\n      navigator.credentials.requireUserMediation();\n    }\n    app.userProfile = null;\n    app.fire('show-toast', {\n      text: \"You're unregistered.\"\n    });\n    app.selected = 0;\n  }, e => {\n    console.error(e);\n    app.fire('show-toast', {\n      text: 'Failed to unregister'\n    });\n  });\n};\n\n/**\n * Invoked when 'Sign-out' button is pressed, performs sign-out.\n * @return {void}\n */\napp.signOut = function() {\n  app._fetch(SIGNOUT)\n  .then(() => {\n    if (app.cmaEnabled) {\n      // Turn on the mediation mode so auto sign-in won't happen\n      // until next time user intended to do so.\n      navigator.credentials.requireUserMediation();\n    }\n    app.userProfile = null;\n    app.fire('show-toast', {\n      text: \"You're signed out.\"\n    });\n  }, () => {\n    app.fire('show-toast', {\n      text: 'Failed to sign out'\n    });\n  });\n};\n\n/**\n * User is signed in. Fill user info.\n * @param  {Object} profile Profile information object\n * @return {Promise} Resolves when authentication succeeded.\n */\napp.signedIn = function(profile) {\n  if (profile && profile.name && profile.email) {\n    app.userProfile = {\n      id:       profile.id,\n      name:     profile.name,\n      email:    profile.email,\n      imageUrl: profile.imageUrl || DEFAULT_IMG\n    };\n    return Promise.resolve(profile);\n  } else {\n    return Promise.reject();\n  }\n};\n\n/**\n * Polymer event handler to show a toast.\n * @param  {Event} e Polymer custom event object\n * @return {void}\n */\napp.showToast = function(e) {\n  this.$.toast.text = e.detail.text;\n  this.$.toast.show();\n};\n\n/**\n * Invoked when 'Sign-In' button is pressed, perform auto-sign-in and\n * open dialog if it fails.\n * @return {void}\n */\napp.openDialog = function() {\n  // Try auto sign-in before opening the dialog\n  app._autoSignIn(false)\n  .then(profile => {\n    // When auto sign-in didn't resolve with a profile\n    // it's failed to get credential information.\n    // Open the form so the user can enter id/password\n    // or select federated login manually\n    if (!profile) {\n      app.$.dialog.open();\n    }\n  }, () => {\n    app.$.dialog.open();\n    // When rejected, authentication was performed but failed.\n    app.fire('show-toast', {\n      text: 'Authentication failed'\n    });\n  });\n};\n\n// Initialise Facebook Login\nFB.init({\n  // Replace this with your own App ID\n  appId:    FB_APPID,\n  cookie:   true,\n  xfbml:    false,\n  version:  'v2.5'\n});\n\n// Initialise Google Sign-In\ngapi.load('auth2', function() {\n  gapi.auth2.init()\n  .then(() => {\n    // Try auto sign-in performance after initialization\n    app._autoSignIn(true);\n  });\n});\n"]}